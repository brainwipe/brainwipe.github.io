{"componentChunkName":"component---src-templates-blog-post-js","path":"/2017-05-17-linux-wsl/","result":{"data":{"site":{"siteMetadata":{"title":"The Plastic Neuron"}},"markdownRemark":{"id":"3ba1181a-63ba-5fdf-b7c7-9b48a05ac681","excerpt":"Running .NET through Visual Studio with Microsoft SQL Server and onto a Windows Server instance has been that comfortable jumper for many years. As much as the…","html":"<p>Running .NET through Visual Studio with Microsoft SQL Server and onto a Windows Server instance has been that comfortable jumper for many years. As much as the landscape changed from Web Forms to MVC, stored procedures to Entity Framework, you still had that sense of familiarity that Microsoft won’t let you down. That rubber stamp of Microsoft quality has been an easy sell. You could say:</p>\n<blockquote>\n<p>We’re a Microsoft shop</p>\n</blockquote>\n<p>and even if you didn’t have any certification, clients would know that the company you worked for did things properly. Choosing a new Microsoft technology to plug into it meant that no questions would be asked.</p>\n<p>That’s all changed. If you feel stitched into the comfy Microsoft jumper, it’s time to look beyond it because of <em>cost</em>. A Windows Server instance is expensive. A SQL Server instance is expensive (especially if you need database level encryption). Visual Studio is expensive. I’m very productive with Visual Studio and .NET so I want to keep using those but I find it more difficult to justify the cost. There is quality elsewhere, the world is moving on and so is Microsoft.</p>\n<h2>Getting into Linux</h2>\n<p>Before you defenstrate your Windows 10 box with a sharp toe punt, you’ll be pleased to read that you can learn Linux from within the comfort of your own Windows environment. Microsoft have embedded Linux into something called the Windows Subsystem for Linux (WSL) since the “Anniversary Update”. You could do this with a VM but that would take lots of extra resources and you can run Windows programs side-by-side. It’s free but a bit of a pain to get it running:</p>\n<p><a href=\"https://msdn.microsoft.com/en-us/commandline/wsl/install_guide\">WSL Installation Instructions</a></p>\n<h2>Useful things about the WSL</h2>\n<p>The WSL (at time of writing) runs <a href=\"http://releases.ubuntu.com/14.04/\">Ubuntu 14.04</a>. This is a Linux distribution (distro), which is a whole operating system made up from the Linux kernal and a package manager. Packages are tiny little applications and libraries. The bare distro might not have many packages on it but it. As you use your WSL more, you’ll find that you’re installing packages a lot.</p>\n<p>Once you have the WSL running, check out the version you’re on:</p>\n<p><code class=\"language-text\">$ lsb_release -a</code></p>\n<p>You can update all the packages by:</p>\n<p><code class=\"language-text\">$ sudo apt-get update</code></p>\n<p><code class=\"language-text\">sudo</code> means that the command will run with super user priviledges (it’s short for <strong>s</strong>per <strong>u</strong>ser <strong>do</strong>). <code class=\"language-text\">apt-get</code> is the name of the package manager for Ubuntu (and Debian) distros. And <code class=\"language-text\">update</code> is the command itself. <code class=\"language-text\">apt-get</code> will run off to its preferred repository and download the latest packages. If there are any updates available, it will tell you each time you run it.</p>\n<p>The command window you’re typing into (also called a shell) uses a scripting language called bash. Bash is super-powerful but doesn’t look like batch or Powershell, so it’s a new skill to learn.</p>\n<h3>Where is the C drive?</h3>\n<p>The C drive is “mounted”. You can use <kbd>tab</kbd> for autocomplete on longer folder names.</p>\n<p><code class=\"language-text\">$ cd /mnt/c</code></p>\n<blockquote>\n<p>Linux is case sensitive!</p>\n</blockquote>\n<h3>Can I run my windows programs?</h3>\n<p>Yes, although it will spawn the program in Windows normally as if you had use cmd. Try running dear old notepad:</p>\n<p><code class=\"language-text\">$ /mnt/c/Windows/System32/notepad.exe</code></p>\n<h2>Path variables and command prompt customisation</h2>\n<p>I’m a sucker for having things just so. I have a <a href=\"https://github.com/brainwipe/scripts\">scripts git repository</a> that I’m building up and I want a path to the cloned repository on my local machine. To do that you need to edit a file called <code class=\"language-text\">.bashrc</code>, which is a shell script that is run when the shell first starts.</p>\n<p>You can edit it using <a href=\"https://www.howtogeek.com/howto/42980/the-beginners-guide-to-nano-the-linux-command-line-text-editor/\">nano</a> (there are many others) like this:</p>\n<p><code class=\"language-text\">$ nano ~/.bashrc</code></p>\n<p>The <code class=\"language-text\">~/</code> is a shortcut for saying “the current users home directory”, which is not the Windows one but instead located in <code class=\"language-text\">/home/username</code> such as <code class=\"language-text\">/home/brainwipe</code>.</p>\n<p>There’s a bunch of stuff in <code class=\"language-text\">.bashrc</code> to begin with, you can add more at the bottom. I can add new paths like this:</p>\n<p><code class=\"language-text\">PATH=$PATH:/mnt/c/Projects/brainwipe/scripts/bash</code></p>\n<p>As the <code class=\"language-text\">PATH</code> variable is a big, long single string (like it used to be shown in Windows), you are actually appending your new path (in this case <code class=\"language-text\">/mnt/c/Projects/brainwipe/scripts/bash</code>) onto the existing variable <code class=\"language-text\">$PATH</code>.</p>\n<p>The other thing I like to change is the command prompt. I like to have the time and working directory. That’s just another line in the <code class=\"language-text\">.bashrc</code> file.</p>\n<p><code class=\"language-text\">export PS1=\"\\t \\w >\"</code></p>\n<p>Will give: <code class=\"language-text\">13:36:36 /mnt/c/Projects ></code></p>\n<p><code class=\"language-text\">PS1</code> stands for <em>Prompt String One</em>. You can find loads of example of prompt coolness on [make tech easier]<a href=\"https://www.maketecheasier.com/8-useful-and-interesting-bash-prompts/\">https://www.maketecheasier.com/8-useful-and-interesting-bash-prompts/</a>) and all over the web!</p>\n<h2>Further Reading</h2>\n<ul>\n<li><a href=\"https://msdn.microsoft.com/en-us/commandline/wsl/faq\">Microsoft WSL FAQ</a></li>\n</ul>","frontmatter":{"title":"A .NET codger getting into Linux on Windows","date":"May 17, 2017","description":null}},"previous":{"fields":{"slug":"/2017-05-16-pulling-jekyll-teeth/"},"frontmatter":{"title":"Pulling Jekyll teeth on the Windows Subsystem for Linux"}},"next":{"fields":{"slug":"/2017-05-23-docker-linux-dotnet/"},"frontmatter":{"title":".NET running on a Linux docker container"}}},"pageContext":{"id":"3ba1181a-63ba-5fdf-b7c7-9b48a05ac681","previousPostId":"3b68680d-708e-5d47-a1fc-eba712a5abd6","nextPostId":"d106f7d3-37e3-5b14-8282-40367852d4e5"}},"staticQueryHashes":["2841359383","69202846"]}