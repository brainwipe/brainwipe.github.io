{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019-02-07-brighter-dotnetcorelinuxdaemon/","result":{"data":{"site":{"siteMetadata":{"title":"The Plastic Neuron"}},"markdownRemark":{"id":"69d17667-ac1d-5e2d-8bbb-6f45da5418c7","excerpt":"We’re going to implement a simple linux daemon service in .NET Core 2.x that hosts a Brighter Service for responding to events posted to a RabbitMQ queue. If…","html":"<p>We’re going to implement a simple linux daemon service in .NET Core 2.x that hosts a Brighter Service for responding to events posted to a RabbitMQ queue. If you just want to create a Linux daemon, see my <a href=\"/2019-02-05-dotnetcore-linux-daemon\">post on creating a simple dotnet Core linux daemon</a>.</p>\n<p>The <a href=\"https://www.goparamore.io\">Brighter command processor library</a> for .NET allows you to decouple the endpoint from the domain. When using the library with a message broker (such as <a href=\"https://www.rabbitmq.com/\">RabbitMQ</a>), you can use a separate service to watch the message queue and respond to their messages. The Brighter <a href=\"https://www.goparamore.io/greetings-example/\">Greetings Example</a> shows you how to host a Brighter Service Activator in a windows server (using a console app and TopShelf).</p>\n<p>We’re not going to cover how to create commands and events and posting them to the queue, you can find details of that in the <a href=\"https://github.com/BrighterCommand/Paramore.Brighter.Extensions/blob/master/samples/GreetingsSender/Program.cs\">Sender of the Paramore Extensions Greetings example</a>.</p>\n<h2>Install RabbitMQ</h2>\n<p>Surf to the <a href=\"https://www.rabbitmq.com/\">RabbitMQ</a> website, download the latest Erlang (programming environment that Rabbit runs on) and installer. Take the default options for each.</p>\n<p>Once installed:</p>\n<ul>\n<li>In powershell, enable the management plugin: <code class=\"language-text\">rabbitmq-plugins enable rabbitmq_management</code></li>\n<li>Go to <code class=\"language-text\">http://localhost:15672</code></li>\n<li>Username <code class=\"language-text\">guest</code> and password <code class=\"language-text\">guest</code></li>\n</ul>\n<p>We do not need to create exchanges, queues or bindings in the management UI, Brighter will perform that task for us.</p>\n<h2>Create a .NET Core Linux Daemon</h2>\n<p>We’re going to create a .NET Core 2.x console application that can be run as a service on linux (a daemon). It can also be run via Powershell/Visual Studio for testing.</p>\n<ul>\n<li>Ensure you have the <a href=\"https://dotnet.microsoft.com/download/dotnet-core/2.2\">.NET Core 2.2</a> (or later) SDK installed.</li>\n<li>Open VS2017, create a new .NET Core Console Project</li>\n<li>Once created, open the project properties, select Build, go to Advanced and select <code class=\"language-text\">C# latest minor version</code>. We need this for the <code class=\"language-text\">static async Main</code> below.</li>\n<li>Using nuget, add the following packages (and their dependencies):\n<ul>\n<li><code class=\"language-text\">Microsoft.Extensions.Configuration.CommandLine</code></li>\n<li><code class=\"language-text\">Microsoft.Extensions.Configuration.EnvironmentVariables</code></li>\n<li><code class=\"language-text\">Microsoft.Extensions.DependencyInjection</code></li>\n<li><code class=\"language-text\">Microsoft.Extensions.Hosting</code></li>\n<li><code class=\"language-text\">Microsoft.Extensions.Logging.Console</code></li>\n<li><code class=\"language-text\">Microsoft.Extensions.Options.ConfigurationExtensions</code></li>\n</ul>\n</li>\n<li>Open Program, remove the Main method and replace it with this Daemon boilerplate:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HostBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureAppConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>hostingContext<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\r\n            <span class=\"token punctuation\">{</span>\r\n                config<span class=\"token punctuation\">.</span><span class=\"token function\">AddEnvironmentVariables</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token punctuation\">{</span>\r\n                    config<span class=\"token punctuation\">.</span><span class=\"token function\">AddCommandLine</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token punctuation\">}</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>hostContext<span class=\"token punctuation\">,</span> services<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\r\n            <span class=\"token punctuation\">{</span>\r\n                services<span class=\"token punctuation\">.</span><span class=\"token function\">AddOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureLogging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>hostingContext<span class=\"token punctuation\">,</span> logging<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n                logging<span class=\"token punctuation\">.</span><span class=\"token function\">AddConfiguration</span><span class=\"token punctuation\">(</span>hostingContext<span class=\"token punctuation\">.</span>Configuration<span class=\"token punctuation\">.</span><span class=\"token function\">GetSection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Logging\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                logging<span class=\"token punctuation\">.</span><span class=\"token function\">AddConsole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token keyword\">await</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">RunConsoleAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>There is no service or configuration yet, we’re going to let Brighter’s <a href=\"https://github.com/BrighterCommand/Paramore.Brighter.Extensions\">extensions</a> set those up for us.</p>\n<h2>Adding Brighter</h2>\n<p>We’re now going to add Brighter to watch for messages on our Rabbit MQ queue and print them to the console.</p>\n<ul>\n<li>Select your project, manage nuget packages and add the following packages (and their dependencies):\n<ul>\n<li><code class=\"language-text\">Paramore.Brighter.ServiceActivator</code></li>\n<li><code class=\"language-text\">Paramore.Brighter.ServiceActivator.Extensions.DependencyInjection</code></li>\n<li><code class=\"language-text\">Paramore.Brighter.ServiceActivator.Extensions.Hosting</code></li>\n<li><code class=\"language-text\">Paramore.Brighter.MessagingGateway.RMQ</code></li>\n<li><code class=\"language-text\">Paramore.Brighter.Extensions.DependencyInjection</code></li>\n</ul>\n</li>\n</ul>\n<h2>Creating the Rabbit Gateway Connection</h2>\n<p>At the top of the <code class=\"language-text\">Main</code> we’re going to create the connection to Rabbit. <code class=\"language-text\">Name</code> allows us to identify what is connected in the management UI, the AMPQ Uri is the connection string with <code class=\"language-text\">guest</code> for username and password (the default). The Exchange is the “port” which acts as an interface between the queues and our consumer console app.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> rmqConnection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RmqMessagingGatewayConnection</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        Name <span class=\"token operator\">=</span> <span class=\"token string\">\"My Linux Daemon\"</span><span class=\"token punctuation\">,</span>\r\n        AmpqUri <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AmqpUriSpecification</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Uri</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"amqp://guest:guest@localhost:5672\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n        Exchange <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Exchange</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my.exchange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fanout\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> rmqMessageConsumerFactory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RmqMessageConsumerFactory</span><span class=\"token punctuation\">(</span>rmqConnection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>After that, we need to build a connection for each of the events that we are going to consume. The connection has an optional <code class=\"language-text\">ConnectionName</code>. The <code class=\"language-text\">ChannelName</code> will become the name of the queue in RabbitMQ. Durable queues are those that remember your messages (events and commands) even if RabbitMQ (sometimes called The Node) is restarted.l</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> connection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Connection<span class=\"token punctuation\">&lt;</span>MyEvent<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\r\n        <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ConnectionName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MCO.Reporting.Console\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ChannelName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my.qeue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token named-parameter punctuation\">timeoutInMilliseconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token named-parameter punctuation\">isDurable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token named-parameter punctuation\">highAvailability</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>NB: you can customise Brighter by passing an anonymous type when calling <code class=\"language-text\">AddBrighter()</code> <a href=\"https://github.com/BrighterCommand/Paramore.Brighter.Extensions#1-paramorebrighterextensionsdependencyinjection\">see the docs!</a></li>\n</ul>","frontmatter":{"title":"Brighter Servicehost as a .NET Core 2.x linux daemon with RabbitMQ","date":"July 11, 2018","description":null}},"previous":{"fields":{"slug":"/2018-07-11-aws-ecr-docker-powershell/"},"frontmatter":{"title":"AWS Elastic Container Registry with docker compose on Powershell"}},"next":{"fields":{"slug":"/2019-02-05-dotnetcore-linux-daemon/"},"frontmatter":{"title":".NET Core Linux Daemon"}}},"pageContext":{"id":"69d17667-ac1d-5e2d-8bbb-6f45da5418c7","previousPostId":"e99245b7-e5de-5e2d-903f-1985e17181e9","nextPostId":"450a517c-d147-59e9-91ee-34f26d917682"}},"staticQueryHashes":["2841359383","69202846"],"slicesMap":{}}