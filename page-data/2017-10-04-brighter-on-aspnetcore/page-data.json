{"componentChunkName":"component---src-templates-blog-post-js","path":"/2017-10-04-brighter-on-aspnetcore/","result":{"data":{"site":{"siteMetadata":{"title":"The Plastic Neuron"}},"markdownRemark":{"id":"03d7242a-9664-5acf-ad98-08596be3a789","excerpt":"In this post you will learn how to get a simple ASP.NET Core 2 API running that uses the Brighter command pattern for sending updates to an in-memory database…","html":"<p>In this post you will learn how to get a simple ASP.NET Core 2 API running that uses the <a href=\"https://github.com/BrighterCommand/Brighter\">Brighter</a> command pattern for sending updates to an in-memory database. Brighter is a library that sits between the API layer and your business logic (and persistance/database layer). This is not production code but the smallest number of steps to get a simple Brighter Command Processor working in ASP.NET Core 2.</p>\n<p>You can get the completed code from my example <a href=\"https://github.com/brainwipe/BrighterOnAspNetCoreExample\">BrighterOnAspNetCoreExample</a> repository.</p>\n<h2>Pre-requisites</h2>\n<ul>\n<li>Visual Studio 2017</li>\n</ul>\n<h2>Command, Query Responsibility Separation</h2>\n<p>CQRS is an architecture pattern where you use a different model to update than you do to query. <a href=\"https://martinfowler.com/bliki/CQRS.html\">Martin Fowler</a> does an excellent job of explaining it in detail. Brigher only deals with the Command side, that is the create, update and delete.</p>\n<h2>1. Create ASP.NET Core 2.0 API Project</h2>\n<ul>\n<li>In Visual Studio, File → New Project → ASP.NET Core</li>\n<li>In the next window choose Web API</li>\n<li>I’m going to call the project BrighterOnAspNetCore</li>\n<li>In the Solution Explorer, right click BrighterOnAspNetCore → Properties</li>\n<li>In Application Tab, select Target Framework as .NET Core 2.0 and save.</li>\n</ul>\n<h2>2. Update existing dependencies</h2>\n<ul>\n<li>Right click on the BrighterOnAspNetCore → Manage Nuget Packages</li>\n<li>Update any existing packages to v2.</li>\n</ul>\n<h2>3. Add Brighter AspNet Core dependency</h2>\n<ul>\n<li>Still in the Nuget Package Manager window, click “Include Prerelease”</li>\n<li>Install <code class=\"language-text\">Paramore.Brighter.AspNetCore</code> by Daniel Stockhammer. (Brighter will be installed too)</li>\n</ul>\n<h2>4. Create a library to hold your domain</h2>\n<p>This step is not absolutely necessary but will give a better feel of what a solution ready for production would look like.</p>\n<ul>\n<li>In Solution Explorer, right click the Solution → Add</li>\n<li>Choose an ASP.NET Core class library, call it Domain.</li>\n<li>Delete the <code class=\"language-text\">Class1.cs</code> that is created for free.</li>\n<li>Add the <code class=\"language-text\">Paramore.Brighter</code> nuget package to the Domain project.</li>\n<li>Add a project reference to the Domain project from the BrighterOnAspNetCore project.</li>\n</ul>\n<h2>5. Add Command and Handler to your domain</h2>\n<p>A Command is a class that holds all the information needed to make a change to your data model. A Handler performs the actual change to the data model. In this case we’re going to create a Command that creates a <code class=\"language-text\">Value</code>, which is simply an integer that you might put into a database.</p>\n<ul>\n<li>In your Domain project, add two folders one called <code class=\"language-text\">Commands</code> and one called <code class=\"language-text\">Handlers</code></li>\n<li>In <code class=\"language-text\">Domain/Commands</code> add a new class <code class=\"language-text\">CreateValueCommand</code>.</li>\n<li>It must implement the <code class=\"language-text\">IRequest</code> interface, which is simply an Id for an instance of the command.</li>\n<li>Add an <code class=\"language-text\">Email</code> string property and set it in the constructor.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Paramore<span class=\"token punctuation\">.</span>Brighter</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Domain<span class=\"token punctuation\">.</span>Commands</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateValueCommand</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IRequest</span></span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">public</span> <span class=\"token function\">CreateValueCommand</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            Id <span class=\"token operator\">=</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">NewGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            Value <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Value <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Guid</span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>In <code class=\"language-text\">Domain/Handers</code> add a new class <code class=\"language-text\">CreateValueCommandHandler</code>.</li>\n<li><code class=\"language-text\">CreateValueCommandHandler</code> must extend the base class <code class=\"language-text\">RequestHandler&lt;CreateValueCommand></code>. The generic parameter of <code class=\"language-text\">CreateValueCommand</code> is how we say that this handler is for the <code class=\"language-text\">CreateValueCommand</code>.</li>\n<li>We override the <code class=\"language-text\">Handle()</code> method, which is where we would put our database update logic.</li>\n<li>For now, we’re going to simply write to the debug console in Visual Studio.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Diagnostics</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Domain<span class=\"token punctuation\">.</span>Commands</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Paramore<span class=\"token punctuation\">.</span>Brighter</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Domain<span class=\"token punctuation\">.</span>Handlers</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateValueCommandHandler</span>  <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">RequestHandler<span class=\"token punctuation\">&lt;</span>CreateValueCommand<span class=\"token punctuation\">></span></span></span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">CreateValueCommand</span> <span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateValueCommand</span> command<span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Creating Value </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">command<span class=\"token punctuation\">.</span>Value</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>6. Add Brighter configuration to the service collection</h2>\n<p>ASP.NET Core uses a service collection as a dependency injection container. We need to use this because in our API Controller we want to use the <code class=\"language-text\">CommandProcessor</code> to create commands. We’ll come onto that next but first we’ll configure ASP.NET to use Brighter.</p>\n<ul>\n<li>Open <code class=\"language-text\">BrighterOnAspNetCore/Startup.cs</code></li>\n<li>In the <code class=\"language-text\">ConfigureServices</code> method, add the following lines <em>before</em> <code class=\"language-text\">.AddMvc()</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">    services<span class=\"token punctuation\">.</span><span class=\"token function\">AddBrighter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">HandlersFromAssemblies</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">CreateValueCommandHandler</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Assembly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This will add all the Handlers in the same assembly as our <code class=\"language-text\">CreateValueCommandHandler</code> to the ASP.NET Core dependency injection container, and perform some default setup. See <a href=\"https://github.com/brainwipe/Paramore.Brighter.AspNetCore\">Paramore.Brighter.AspNetCore</a> for the options that are available.</p>\n<h2>7. Add Command Processor into our controller and create a command</h2>\n<p>Commands are all about changing the data in your system, not getting it.</p>\n<ul>\n<li>Open <code class=\"language-text\">BrighterOnAspNetCore/Controllers/ValuesController.cs</code></li>\n<li>At the top of the Controller class create the following member variable and constructor:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IAmACommandProcessor</span> commandProcessor<span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token function\">ValuesController</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IAmACommandProcessor</span> commandProcessor<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commandProcessor <span class=\"token operator\">=</span> commandProcessor<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The interface <code class=\"language-text\">IAmCommandProcessor</code> will have been registered with the ASP.NET Core dependency injection in the last step. When the controller is instantiated, it will be injected in, ready built and filled with handlers, ready to use.</p>\n<ul>\n<li>In the <code class=\"language-text\">Post()</code> method, create value command and send it to the <code class=\"language-text\">commandProcessor</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// POST api/values</span>\r\n<span class=\"token punctuation\">[</span><span class=\"token function\">HttpPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{value}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Post</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> command <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CreateValueCommand</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    commandProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is the simplest thing that works; it would be better for the new value we’re posting to the service to be in the Body but for that we would need to introduce JSON and a model or a text/plain formatter. For simplicity sake, we’ll grab it from the URL instead.</p>\n<h2>Testing the service</h2>\n<p>Run the application and then use as HTTP test client (I like <a href=\"https://www.getpostman.com/\">Postman</a> but curl would do!) to POST a request to: <code class=\"language-text\">http://localhost:58484/api/values/helloworld</code>, where <code class=\"language-text\">localhost:58484</code> is root of your website and <code class=\"language-text\">helloworld</code> is the data you’re sending.</p>\n<p>In the Visual Studio Output window, set “Show Output From” to Debug and you should see <code class=\"language-text\">Creating value helloworld</code>. This means that the Command has moved through Brighter and Handled by your command Handler.</p>","frontmatter":{"title":"Using Brighter on ASP.NET Core 2.0 API","date":"October 04, 2017","description":null}},"previous":{"fields":{"slug":"/2017-07-28-nginx-vs-docker-compose/"},"frontmatter":{"title":"Adding an nginx container for static files in my VS2017 solution"}},"next":{"fields":{"slug":"/2017-10-10-di-on-dotnet-core-cli/"},"frontmatter":{"title":"Using Dependency Injection on the .NET Core Command Line"}}},"pageContext":{"id":"03d7242a-9664-5acf-ad98-08596be3a789","previousPostId":"9ac7d0d5-69a3-5c93-b551-03a415b0ad1d","nextPostId":"3fbc19c5-8ac9-5ec2-8215-c4c88f6fe1b1"}},"staticQueryHashes":["2841359383","69202846"]}