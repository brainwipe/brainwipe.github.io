{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019-02-05-dotnetcore-linux-daemon/","result":{"data":{"site":{"siteMetadata":{"title":"The Plastic Neuron"}},"markdownRemark":{"id":"450a517c-d147-59e9-91ee-34f26d917682","excerpt":"We’re going to implement a simple Linux daemon service in .NET Core 2.x. The daemon will respond to input arguments and write to the console. Create a .NET Core…","html":"<p>We’re going to implement a simple Linux daemon service in .NET Core 2.x. The daemon will respond to input arguments and write to the console.</p>\n<h2>Create a .NET Core Linux Daemon</h2>\n<p>We’re going to create a .NET Core 2.x console application that can be run as a service on linux (a daemon). It can also be run via Powershell/Visual Studio for testing.</p>\n<ul>\n<li>Ensure you have the <a href=\"https://dotnet.microsoft.com/download/dotnet-core/2.2\">.NET Core 2</a> (or later) SDK installed. I’m using 2.2 for this example.</li>\n<li>Open VS2017, create a new .NET Core Console Project</li>\n<li>Once created, open the project properties, select Build, go to Advanced and select <code class=\"language-text\">C# latest minor version</code>. We need this for the <code class=\"language-text\">static async Main</code> below.</li>\n<li>Using nuget, add the following packages (and their dependencies):\n<ul>\n<li><code class=\"language-text\">Microsoft.Extensions.Configuration.CommandLine</code></li>\n<li><code class=\"language-text\">Microsoft.Extensions.Configuration.EnvironmentVariables</code></li>\n<li><code class=\"language-text\">Microsoft.Extensions.DependencyInjection</code></li>\n<li><code class=\"language-text\">Microsoft.Extensions.Hosting</code></li>\n<li><code class=\"language-text\">Microsoft.Extensions.Logging.Console</code></li>\n<li><code class=\"language-text\">Microsoft.Extensions.Options.ConfigurationExtensions</code></li>\n</ul>\n</li>\n<li>Open Program, remove the Main method and replace it with this Daemon boilerplate:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HostBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureAppConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>hostingContext<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\r\n            <span class=\"token punctuation\">{</span>\r\n                config<span class=\"token punctuation\">.</span><span class=\"token function\">AddEnvironmentVariables</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token punctuation\">{</span>\r\n                    config<span class=\"token punctuation\">.</span><span class=\"token function\">AddCommandLine</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token punctuation\">}</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureServices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>hostContext<span class=\"token punctuation\">,</span> services<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\r\n            <span class=\"token punctuation\">{</span>\r\n                services<span class=\"token punctuation\">.</span><span class=\"token function\">AddOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Configure</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>DaemonConfig<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>hostContext<span class=\"token punctuation\">.</span>Configuration<span class=\"token punctuation\">.</span><span class=\"token function\">GetSection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Daemon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IHostedService<span class=\"token punctuation\">,</span> DaemonService<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token punctuation\">.</span><span class=\"token function\">ConfigureLogging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>hostingContext<span class=\"token punctuation\">,</span> logging<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n                logging<span class=\"token punctuation\">.</span><span class=\"token function\">AddConfiguration</span><span class=\"token punctuation\">(</span>hostingContext<span class=\"token punctuation\">.</span>Configuration<span class=\"token punctuation\">.</span><span class=\"token function\">GetSection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Logging\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                logging<span class=\"token punctuation\">.</span><span class=\"token function\">AddConsole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token keyword\">await</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">RunConsoleAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Don’t worry about the compiler complaining about <code class=\"language-text\">DaemonConfig</code> or <code class=\"language-text\">DaemonService</code>, we’re about to create those. All the other types and methods should be included in using statements.</p>\n<h3>Configuration</h3>\n<p>We want to pass configuration into the daemon as commandline parameters. In the <code class=\"language-text\">Main</code> method, <code class=\"language-text\">ConfigureAppConfiguration</code> binds any commandline arguments to a configuration section called “Daemon”. We need to create a class to hold the command line arguments, we’re going to call it <code class=\"language-text\">DaemonConfig</code>. In the future, if you need to add more command line arguments, then all you need to do is add properties to this class.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DaemonConfig</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> DaemonName <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Service</h3>\n<p>We’re going to add a service so that you can see the daemon running in its simplest form. The service implements <code class=\"language-text\">IHostedService</code> and accepts events from host operating system for Starting, Stopping and so on. The configuration we’ve just created is injected in the constructor for us to use.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DaemonService</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IHostedService</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IDisposable</span></span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ILogger</span> logger<span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IOptions<span class=\"token punctuation\">&lt;</span>DaemonConfig<span class=\"token punctuation\">></span></span> config<span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token keyword\">public</span> <span class=\"token function\">DaemonService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ILogger<span class=\"token punctuation\">&lt;</span>DaemonService<span class=\"token punctuation\">></span></span> logger<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOptions<span class=\"token punctuation\">&lt;</span>DaemonConfig<span class=\"token punctuation\">></span></span> config<span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger <span class=\"token operator\">=</span> logger<span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>config <span class=\"token operator\">=</span> config<span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">StartAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Starting: \"</span> <span class=\"token operator\">+</span> config<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>DaemonName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span>CompletedTask<span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">StopAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stopping: \"</span> <span class=\"token operator\">+</span> config<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>DaemonName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span>CompletedTask<span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\r\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">LogInformation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Disposing \"</span> <span class=\"token operator\">+</span> config<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span>DaemonName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>First Run</h2>\n<p>Build the code you have so far, open powershell and cd into the project folder, run the daemon using:</p>\n<p><code class=\"language-text\">dotnet run --Daemon:DaemonName=\"Hello World!\"</code></p>\n<p>Press CTRL-C to stop the daemon. My console is called <code class=\"language-text\">MCO.Reporting.Console</code>, so I see:</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token punctuation\">[</span>11:33:54<span class=\"token punctuation\">]</span> MCO<span class=\"token punctuation\">.</span>Reporting<span class=\"token punctuation\">.</span>Console> dotnet run <span class=\"token operator\">--</span>Daemon:DaemonName=<span class=\"token string\">\"Hello World!\"</span>\r\nApplication started<span class=\"token punctuation\">.</span> Press Ctrl+C to shut down<span class=\"token punctuation\">.</span>\r\nHosting environment: Production\r\ninfoContent root path: C:\\projects\\MCO-Reporting\\src\\MCO<span class=\"token punctuation\">.</span>Reporting<span class=\"token punctuation\">.</span>Console\\bin\\Debug\\netcoreapp2<span class=\"token punctuation\">.</span>2\\\r\n: MCO<span class=\"token punctuation\">.</span>Reporting<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span>DaemonService<span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span>\r\n      Starting: Hello World!\r\ninfo: MCO<span class=\"token punctuation\">.</span>Reporting<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span>DaemonService<span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span>\r\n      Stopping: Hello World!\r\ninfo: MCO<span class=\"token punctuation\">.</span>Reporting<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span>DaemonService<span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">]</span>\r\n      Disposing Hello World!\r\n<span class=\"token punctuation\">[</span>11:33:59<span class=\"token punctuation\">]</span> MCO<span class=\"token punctuation\">.</span>Reporting<span class=\"token punctuation\">.</span>Console></code></pre></div>","frontmatter":{"title":".NET Core Linux Daemon","date":"July 11, 2018","description":null}},"previous":{"fields":{"slug":"/2017-10-30-oauth-on-docker-part1/"},"frontmatter":{"title":"ASP.NET Core 2 API on Docker with OAuth (Part 1)"}},"next":{"fields":{"slug":"/2019-02-07-brighter-dotnetcorelinuxdaemon/"},"frontmatter":{"title":"Brighter Servicehost as a .NET Core 2.x linux daemon with RabbitMQ"}}},"pageContext":{"id":"450a517c-d147-59e9-91ee-34f26d917682","previousPostId":"9295d434-7301-51ab-aeb2-5fba33edc128","nextPostId":"69d17667-ac1d-5e2d-8bbb-6f45da5418c7"}},"staticQueryHashes":["2841359383","69202846"]}