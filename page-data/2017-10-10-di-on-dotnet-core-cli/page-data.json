{"componentChunkName":"component---src-templates-blog-post-js","path":"/2017-10-10-di-on-dotnet-core-cli/","result":{"data":{"site":{"siteMetadata":{"title":"The Plastic Neuron"}},"markdownRemark":{"id":"3fbc19c5-8ac9-5ec2-8215-c4c88f6fe1b1","excerpt":"Developers should build tools to help them develop code. If you are building an ASP.NET web app then I can recommend building a companion command line tool for…","html":"<p>Developers should build tools to help them develop code. If you are building an ASP.NET web app then I can recommend building a companion command line tool for you to use. The command line tool is there to help you understand system state or show data in your system in such a way that makes sense for you. It’s not for release, it’s to make you more effective. It’s the one thing I wish I’ve always done.</p>\n<p>I like to include it in the same solution as the main application so that it can be built and kept up to date with the system. I also use it to call the service layer directly (by-passing the web API) and use the real entity objects. I want to be able to use the same dependency injection registration process in the command line</p>\n<p>I’m going to assume you know what dependency injection is. If not, then please do read a bit of <a href=\"https://martinfowler.com/articles/injection.html\">Martin Fowler</a> (I’m a bit of a fan).</p>\n<h2>Get the code</h2>\n<p>For those wanting to jump in, check out the <a href=\"https://github.com/brainwipe/DIOnDotNetCoreCLI\">GitHub Repo DIOnDotNetCoreCLI</a>.</p>\n<h2>.NET CommandLineUtils</h2>\n<p>.NET Core gives us a new challenge as we can create command line apps that run on both Linux and Windows, making them better for fitting into your tool chains. Microsoft originally created the <code class=\"language-text\">CommandLineUtils</code> DLL but have discontinued support. Instead Nate McMaster (of the ASP.NET team) <a href=\"https://github.com/aspnet/Common/pull/261\">has forked the code</a> and will maintain it as a <a href=\"https://github.com/natemcmaster/CommandLineUtils\">personal project</a>. Thank you to Nate for taking on this ace library!</p>\n<h2>Anonymous functions vs Separate Command Classes</h2>\n<p>If you command line application is simple then I recommend using the <a href=\"https://github.com/natemcmaster/CommandLineUtils#usage\">anonymous function method</a> of building your tools.</p>\n<p>I prefer to split out each command into separate classes. Mostly because I tend to have lots of commands in a single console project. For example <code class=\"language-text\">c:/>myapp -say \"hello world\"</code> on the commandline would be in a class <code class=\"language-text\">SayCommand</code>.</p>\n<p>I’m going to assume that you’re following separate command classes for this tutorial.</p>\n<h2>1. Example Console App</h2>\n<p>For this example, we have a service that prints out a Shakespear Quote (<code class=\"language-text\">QuotesService</code>) and a service that wraps text with some ascii art (<code class=\"language-text\">FormatterService</code>). I want to use a command line application to call an exteronal service library. For most of my commands I want them to be of the form: <code class=\"language-text\">c:/>myapp &lt;command name> &lt;options></code>. The CommandLineUtils library supports multiple levels but</p>\n<ul>\n<li>Create a new .NET Core Console app: New Project → Visual C#/.NET Core/Console App (.NET COre)</li>\n<li>Right click project → Manage nuget packages</li>\n<li>Click Browse, install <code class=\"language-text\">McMaster.Extensions.CommandLineUtils</code></li>\n<li>Also install <code class=\"language-text\">Microsoft.Extensions.DependencyInjection</code></li>\n</ul>\n<h2>2. Add your services</h2>\n<p>When you’re doing this for your application then you add in a reference for your service library. I’m not going to go through how to make one here, you can <a href=\"https://github.com/brainwipe/DIOnDotNetCoreCLI/tree/master/DIOnDotNetCoreCLI.Services\">check out the code on Github</a>. It’s the next bit we want to spend time on.</p>\n<h2>3. Create a root Command Line Application</h2>\n<p>The core class of the CommandLineUtils library is the <code class=\"language-text\">CommandLineApplication</code>. You need to create at least one <code class=\"language-text\">CommandLineApplication</code> and then attach commands to it as children. We’re going to create our own version that can handle the dependency injection.</p>\n<ul>\n<li>Create a new class <code class=\"language-text\">CommandLineApplicationWithDI</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CommandLineApplicationWithDI</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">CommandLineApplication</span></span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IServiceProvider</span> serviceProvider<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token function\">CommandLineApplicationWithDI</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IServiceProvider</span> serviceProvider<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serviceProvider <span class=\"token operator\">=</span> serviceProvider<span class=\"token punctuation\">;</span>\r\n        <span class=\"token function\">RegisterCommands</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RegisterCommands</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> command <span class=\"token keyword\">in</span> serviceProvider<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetServices</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ICommand<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">{</span>\r\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> commandLineApp <span class=\"token operator\">=</span> command <span class=\"token keyword\">as</span> <span class=\"token class-name\">CommandLineApplication</span><span class=\"token punctuation\">;</span>\r\n\r\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>commandLineApp <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token punctuation\">{</span>\r\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">InvalidCastException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Commands must inherit from ICommand and CommandLineApplication\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n\r\n            Commands<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>commandLineApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The constructor takes in the <code class=\"language-text\">ServiceProvider</code>, which is Microsoft’s Dependency Injection container. We’ll come onto that later. It then uses this to find all the classes that implement <code class=\"language-text\">ICommand</code>, which is an interface we need to register our commands to. I’d prefer to do something like <code class=\"language-text\">serviceProvider.GetServices&lt;CommandLineApplication></code> but we can’t register types under a concrete class and there is no interface provided in <code class=\"language-text\">CommandLineUtils</code> to use. We need to make our own:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ICommand</span>\r\n<span class=\"token punctuation\">{</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That’s it, only for dependency injection purporses.</p>\n<h2>4. Create a Command</h2>\n<p>Our <code class=\"language-text\">QuoteCommand</code> class will encapuslate everything about our command and make use of the services that will be injected automatically. It must inherit from <code class=\"language-text\">CommandLineApplication</code> to make use of the CommandLineUtils functionality and it needs our <code class=\"language-text\">ICommand</code> interface so that it can be dependency injected.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QuoteCommand</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">CommandLineApplication</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ICommand</span></span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IQuotesService</span> quotesService<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token function\">QuoteCommand</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IQuotesService</span> quotesService<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>quotesService <span class=\"token operator\">=</span> quotesService<span class=\"token punctuation\">;</span>\r\n        Name <span class=\"token operator\">=</span> <span class=\"token string\">\"quote\"</span><span class=\"token punctuation\">;</span>\r\n        Description <span class=\"token operator\">=</span> <span class=\"token string\">\"gives you a bit of Shakespear\"</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token function\">HelpOption</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-? | -h | --help\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token function\">OnExecute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Func<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>Execute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>quotesService<span class=\"token punctuation\">.</span><span class=\"token function\">Shakespear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>5. Finally - Create the DI container and Command Line App</h2>\n<p>In Program.cs, remove the Hello World line and then create the dependency injection container:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> serviceProvider <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ServiceCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddMyServices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddSingleton</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ICommand<span class=\"token punctuation\">,</span> QuoteCommand<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">BuildServiceProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">AddMyServices</code> is a <a href=\"DIOnDotNetCoreCLI/DIOnDotNetCoreCLI.Services/ServiceCollectionExtensions.cs\">ServiceCollection Extension</a> inside my service library. It is responsible for adding its own services to the collection. We then add the <code class=\"language-text\">QuoteCommand</code> on as a Singleton (one per lifetime of the console application) and build it.</p>\n<p>We then pass it into our <code class=\"language-text\">CommandLineApplicationWithDI</code> like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> commandLineApp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CommandLineApplicationWithDI</span><span class=\"token punctuation\">(</span>serviceProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And execute the command with the arguments that come in on the command line.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">commandLineApp<span class=\"token punctuation\">.</span><span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Other DI Containers</h2>\n<p>Microsoft’s DI container is really just a set of interfaces and has implementations for other DI containers such as <a href=\"https://github.com/structuremap/StructureMap.Microsoft.DependencyInjection\">StructureMap</a>. With StructureMap, you can add types by convention, so it can automatically find the implementations of <code class=\"language-text\">ICommand</code> for you.</p>\n<h2>Further Reading</h2>\n<ul>\n<li><a href=\"https://andrewlock.net/using-dependency-injection-in-a-net-core-console-application/\">Andrew Lock - Using dependency injection in a .Net Core console application</a>. Has a handy section on logging.</li>\n<li><a href=\"http://blog.devbot.net/console-services/\">Tommy Long</a>. Implements DI at the options level.</li>\n</ul>","frontmatter":{"title":"Using Dependency Injection on the .NET Core Command Line","date":"October 10, 2017","description":null}},"previous":{"fields":{"slug":"/2017-10-04-brighter-on-aspnetcore/"},"frontmatter":{"title":"Using Brighter on ASP.NET Core 2.0 API"}},"next":{"fields":{"slug":"/2017-10-30-oauth-on-docker-part1/"},"frontmatter":{"title":"ASP.NET Core 2 API on Docker with OAuth (Part 1)"}}},"pageContext":{"id":"3fbc19c5-8ac9-5ec2-8215-c4c88f6fe1b1","previousPostId":"03d7242a-9664-5acf-ad98-08596be3a789","nextPostId":"11f3b983-6069-5ae5-8298-6f69aaa7cde8"}},"staticQueryHashes":["2841359383","69202846"]}